/* 
uno.proto - Protocol Buffers for a GRPC service for the game UNO.
Copyright (C) <2020>  <Adoria298>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
syntax = "proto3";

// Available colours for cards. 
enum CardColour {
    WHITE = 0; // default value 
    RED = 1;
    BLUE = 2;
    GREEN = 3;
    YELLOW = 4;
    BLACK = 5; // used for WILD and WILD_DRAW4 cards.
}

// Potential actions for cards. All cards have at least one action.
enum CardAction {
    NONE = 0;
    NUMBER = 1;
    REVERSE = 2;
    DRAW2 = 3;
    SKIP = 4;
    WILD = 5;
    WILD_DRAW4 = 6;
}

// Focus of the game. A pile is a list of cards.
// A WHITE NONE card has a special meaning in the code depending on its value:
//  - value=-1: used in Uno.PlayCard to instruct the server to move play onto 
//                the next turn after multiple Uno.DrawCard
message Card {
    CardColour colour = 1;
    CardAction action = 2;
    // amount added to score by this card and the value of a NumCard.
    // negative values used for special functions.
    // only the numbers -1 to 9 currently used.
    sint32 value = 3; 
}

// Holds a hand (a list of cards), has a name, can declare UNO, and has its // 
// score updated at the end of every round.
// Players are identified by their name. The server will attempt to guarantee 
// that names are preserved.
message Player {
    repeated Card hand = 4;
    string name = 5;
    bool uno_declared = 6;
    uint32 score = 7;

}

// Contains information about the winner and the final ranking.
// If `game_over` is true the rest of the information should be read.
// Otherwise, this is useless and inaccurate information (only update when game won).
message WinInfo {
    bool game_over = 8; // if true the rest of this can be read
    repeated Player ranked_players = 9; // first element is the winner
}

// Informs the client everything it needs to know about the state of the game.
// NB the first element of `players` is the current player.
message StateOfPlay {
    uint32 round_num = 10;
    repeated Player players= 11;  // a client could use this to cheat... - happens IRL ðŸ¤·.
    repeated Card discard_pile = 12;
    repeated Card draw_pile = 13;
    bool round_over = 14;
    WinInfo win_info = 15;
}

// Where the game is played.
service Uno {
    // Client updates server on its player's moves and gets a game wide update /// in return.
    rpc RequestStateOfPlay (Player) returns (StateOfPlay) {}
    // Player wants to play a card, so client sends a card and gets an update 
    // on the state of play.
    // NB this increments the current player, unless the maximum index of 
    // players has been reached, in which case it resets the current player to 
    // 0. A WHITE NONE -1 Card can be used to do so without playing a card. 
    rpc PlayCard (Card) returns (StateOfPlay) {}
    // Player can't play or has to pick up, so client requests a card, telling  // the server who it is so they can check.
    // A client can call this method for as many cards as they need.
    // Once a client has picked up as many cards as necessary, they must play a 
    // WHITE NONE -1 Card to move play on, unless the player can play a card, 
    // in which case the client plays that card to advance play.
    rpc DrawCard (Player) returns (Card) {} 
    // A player wants to join, so their client informs the server of who they'd 
    // like to be. 
    // The server returns who they actually are.
    rpc AddPlayer (Player) returns (Player) {}
    // Allows a player to leave the game. When no player remains, the game ends.
    // Much like Python's list.pop() method this returns the player removed.
    // The game has to be terminated.
    rpc RemovePlayer (Player) returns (Player) {}
}