# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import uno_pb2 as uno__pb2


class UnoStub(object):
    """Where the game is played.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestStateOfPlay = channel.unary_unary(
                '/Uno/RequestStateOfPlay',
                request_serializer=uno__pb2.Player.SerializeToString,
                response_deserializer=uno__pb2.StateOfPlay.FromString,
                )
        self.PlayCard = channel.unary_unary(
                '/Uno/PlayCard',
                request_serializer=uno__pb2.Card.SerializeToString,
                response_deserializer=uno__pb2.StateOfPlay.FromString,
                )
        self.DrawCard = channel.unary_unary(
                '/Uno/DrawCard',
                request_serializer=uno__pb2.Player.SerializeToString,
                response_deserializer=uno__pb2.Card.FromString,
                )
        self.AddPlayer = channel.unary_unary(
                '/Uno/AddPlayer',
                request_serializer=uno__pb2.Player.SerializeToString,
                response_deserializer=uno__pb2.Player.FromString,
                )
        self.RemovePlayer = channel.unary_unary(
                '/Uno/RemovePlayer',
                request_serializer=uno__pb2.Player.SerializeToString,
                response_deserializer=uno__pb2.Player.FromString,
                )


class UnoServicer(object):
    """Where the game is played.
    """

    def RequestStateOfPlay(self, request, context):
        """Client updates server on its player's moves and gets a game wide update /// in return.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlayCard(self, request, context):
        """Player wants to play a card, so client sends a card and gets an update 
        on the state of play.
        NB this increments the current player, unless the maximum index of 
        players has been reached, in which case it resets the current player to 
        0. A WHITE NONE -1 Card can be used to do so without playing a card. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DrawCard(self, request, context):
        """Player can't play or has to pick up, so client requests a card, telling  // the server who it is so they can check.
        A client can call this method for as many cards as they need.
        Once a client has picked up as many cards as necessary, they must play a 
        WHITE NONE -1 Card to move play on, unless the player can play a card, 
        in which case the client plays that card to advance play.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddPlayer(self, request, context):
        """A player wants to join, so their client informs the server of who they'd 
        like to be. 
        The server returns who they actually are.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemovePlayer(self, request, context):
        """Allows a player to leave the game. When no player remains, the game ends.
        Much like Python's list.pop() method this returns the player removed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UnoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestStateOfPlay': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestStateOfPlay,
                    request_deserializer=uno__pb2.Player.FromString,
                    response_serializer=uno__pb2.StateOfPlay.SerializeToString,
            ),
            'PlayCard': grpc.unary_unary_rpc_method_handler(
                    servicer.PlayCard,
                    request_deserializer=uno__pb2.Card.FromString,
                    response_serializer=uno__pb2.StateOfPlay.SerializeToString,
            ),
            'DrawCard': grpc.unary_unary_rpc_method_handler(
                    servicer.DrawCard,
                    request_deserializer=uno__pb2.Player.FromString,
                    response_serializer=uno__pb2.Card.SerializeToString,
            ),
            'AddPlayer': grpc.unary_unary_rpc_method_handler(
                    servicer.AddPlayer,
                    request_deserializer=uno__pb2.Player.FromString,
                    response_serializer=uno__pb2.Player.SerializeToString,
            ),
            'RemovePlayer': grpc.unary_unary_rpc_method_handler(
                    servicer.RemovePlayer,
                    request_deserializer=uno__pb2.Player.FromString,
                    response_serializer=uno__pb2.Player.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Uno', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Uno(object):
    """Where the game is played.
    """

    @staticmethod
    def RequestStateOfPlay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Uno/RequestStateOfPlay',
            uno__pb2.Player.SerializeToString,
            uno__pb2.StateOfPlay.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PlayCard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Uno/PlayCard',
            uno__pb2.Card.SerializeToString,
            uno__pb2.StateOfPlay.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DrawCard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Uno/DrawCard',
            uno__pb2.Player.SerializeToString,
            uno__pb2.Card.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddPlayer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Uno/AddPlayer',
            uno__pb2.Player.SerializeToString,
            uno__pb2.Player.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemovePlayer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Uno/RemovePlayer',
            uno__pb2.Player.SerializeToString,
            uno__pb2.Player.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
